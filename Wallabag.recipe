#!/usr/bin/env python

# CONFIGURATION ###########################################################

####################################################
import os
user_path = os.path.expanduser("~")
try:
    exec(open(user_path + '/.pocketx.py').read())  # python3
except: # FileNotFoundError: noooot perfect! 
    pass
#############################################################################

#############################################################################
import sys

from calibre.constants import config_dir
from calibre.web.feeds.news import BasicNewsRecipe


import datetime
import errno
import json
import mechanize
import operator
import tempfile

from pathlib import PurePath, Path

try:
    from urllib.error import HTTPError
except ImportError:
    from urllib.error import HTTPError

__license__ = 'GPL v3'
__copyright__ = '2023, Silas Coder'

# CONFIGURATION
CLIENT_ID = ""
CLIENT_SECRET = ""
NEEDS_SUBSCRIPTION = True
USERNAME = ""
PASSWORD = ""


class Wallabag(BasicNewsRecipe):
    
    title = 'Wallabag'
    __author__ = 'Silas Coder'
    description = 'Articles from your Wallabag instance'
    needs_subscription = NEEDS_SUBSCRIPTION
    
    temp_dir = None
    
    token = None
    
    def get_credential(self):
        if (self.token == None):
            ensure_authorization()
        return self.token
    
    def parse_index(self):
        print("parsing index with {0}".format(self.get_credential()))
        request = mechanize.Request("https://app.wallabag.it/api/entries.json", dict(),
                headers = {
                    'Authorization': 'Bearer {0}'.format(self.get_credential()),
                    'Content-Type': 'application/json; charset=UTF8',
                    'X-Accept': 'application/json'
                    }
                )
        try:
            response = self.browser.open(request)
            response = json.load(response)
            print("response loaded")
            
        except:
            raise Exception("Failed to get info")
            
        ## Create directory
        self.temp_dir = tempfile.TemporaryDirectory()
        print("d: {}".format(self.temp_dir.name))
            
        ### Handle articles
        entries = response["_embedded"]["items"]
        articles_list = []
        
        for n, art in enumerate(entries):

            with tempfile.NamedTemporaryFile(dir=self.temp_dir.name, delete=False) as f:
                print("f: {}".format(f))
                f.write("<h1 id=\"title\" class=\"title\">{0}</h1>".format(art["title"]).encode("utf-8"))
                print("wrote title")
                
                authors = "Unknown" if art["published_by"] is None else ", ".join(art["published_by"])
                f.write("<h3 id=\"author\" class=\"author\">By: {}</h3>".format(authors).encode("utf-8"))
                print("wrote authors")
                
                
                time = "Unknown" if art["published_at"] is None else datetime.datetime.strptime(art["published_at"], '%Y-%m-%dT%H:%M:%S%z').astimezone().strftime('%d/%m/%Y %H:%M:%S%z')
                f.write("<h3 id=\"time\" class=\"time\">Published: {}</h3>".format(time).encode("utf-8"))
                print("wrote time")
            
                f.write(art["content"].encode("utf-8"))
                print("wrote content")
                article = {
                        'title'       : art["title"],
                        'url'         : "file:///{}".format(f.name),
                        'date'        : time,
                        'description' : "By: {}".format(authors),
                        'content'     : None
                    }
            print("article saved")
            articles_list.append(article)

        return [("Wallabag", articles_list)]
        
        
    
    def ensure_authorization(self):
        request = mechanize.Request("https://app.wallabag.it/oauth/v2/token",
                ('{{'
                    '"grant_type":"password",'
                    '"client_id":"{0}",'
                    '"client_secret":"{1}",'
                    '"username":"{2}",'
                    '"password":"{3}"'
                '}}').format(
                    CLIENT_ID,
                    CLIENT_SECRET,
                    self.username if self.needs_subscription else USERNAME,
                    self.password if self.needs_subscription else PASSWORD
                ),
                headers = {
                    'Content-Type': 'application/json; charset=UTF8',
                    'X-Accept': 'application/json'
                    }
                )
        try:
            response = self.browser.open(request)
            response = json.load(response)
            self.token = response['access_token']
            print("authorized")
        except:
            raise Exception("Cannot authorize")
        
    
    def get_browser(self, *args, **kwargs):
        self.browser = BasicNewsRecipe.get_browser(self)
        self.ensure_authorization()
        print("browser initialized")
        return self.browser

#    def postprocess_book(self, oeb, opts, log):
#        pass
    
    def postprocess_html(self, soup, first):
        title = soup.find(id='title').text # get title

        h1s = soup.findAll('h1')  # get all h1 headers
        for h1 in h1s:
            if title in h1.text:
                h1 = h1.clear()  # clean this tag, so the h1 will be there only

        h2s = soup.findAll('h2')  # get all h2 headers
        for h2 in h2s:
            if title in h2.text:
                h2 = h2.clear()  # clean this tag, so the h1 will be there only

        body = soup.find('body')
        new_tag = soup.new_tag('h1')
        new_tag.append(title)
        body.insert(0, new_tag)
        # print(soup.prettify(), file=sys.stderr)
        return soup

    def default_cover(self, cover_file):
        try:
            from calibre.ebooks import calibre_cover
            title = self.title if isinstance(self.title, unicode) else \
                        self.title.decode('utf-8', 'replace')
            # print('>> title', title, file=sys.stderr)
            date = strftime(self.timefmt)
            time = strftime('%a %d %b %Y %-H:%M')
            img_data = calibre_cover(title, date, time)
            cover_file.write(img_data)
            cover_file.flush()
        except:
            self.log.exception('Failed to generate default cover')
            return False
        return True
